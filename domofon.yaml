swagger: '2.0'

host: localhost:8080 # uncomment to run tests against your local server

info:
  version: 0.2.0
  title: Domofon API
  description: Application started as part of CodeSpace and was further developped within Front-end Guild

basePath: /api

schemes:
  - http
  - https

consumes:
  - application/json

produces:
  - application/json

securityDefinitions:
  EventUpdateToken:
    description: A token stored in an Event which allows for updating selected object.
    type: apiKey
    name: Authorization
    in: header
  AdminAuthorisationToken:
    type: apiKey
    name: Authorization
    in: header

paths:

  /events:

    get:
      summary: Returns a list of active Events.
      description: Active events are not deleted (status != deleted) and their date range is not in the past. Returns Events without embeded related objects (recipients).
      produces:
        - application/json
      responses:
        200:
          schema:
            type: array,
            items:
              $ref: '#/definitions/Event'
        500:
          description: Unexpeted error.
          schema:
            $ref: '#/definitions/Error'

    post:
      summary: Creates a new Event.
      description: Created object can contain a list of location ids and a list of Recipients. Returns an 201 response with created Event and Location header set to new Event API path.
      produces:
      - application/json
      responses:
        201:
          schema:
            $ref: '#/definitions/Event'
        # 422:
        #   description: Required fields were missing or invalid
        #   schema:
        #     $ref: '#/definitions/Error'
        #   examples:
        #     application/json:
        #       status: ValidationError
        #       fields: ['name', 'notifyEmail']

  /events/{id}:
    get:
      summary: Returns an Event with requested ID.
      description: Returned Event contains embedded objects (recipients).
      parameters:
        - name: id
          in: path
          type: string
          description: Event ID
          required: true

    put:
      summary: Updates Event with requested ID.
      description: Updating an Event is only possible when a UpdateToken is provided within the Authorization request header. Returns 200 response.
      parameters:
        - name: id
          in: path
          type: string
          description: Event ID
          required: true

    delete:
      summary: Deletes Event with requested ID.
      description: Deleted events are not removed from storage. Their status is changed. Deleting an Event is only possible when a UpdateToken is provided within the Authorization request header.
      parameters:
        - name: id
          in: path
          type: string
          description: Event ID
          required: true

  /events/{id}/notifications:
    post:
      summary: Triggers sending Event noifications to all Recipients. Returns 200 response.
      description: No request body required.

  /events/{id}/locations:
    post:
      summary: Adds a new Location to Event.
      descripton: Only possible when an Event UpdateToken is provided within the Authorization request header. Request body requires an object containing added Location identifier in an ID property.

  /events/{id}/locations/{fk}:
    delete:
      summary: Removes a Location from an Event.
      descripton: Only possible when an Event UpdateToken is provided within the Authorization request header. Request body requires an object containing deleted Location identifier in an ID property.

  /events/{id}/recipients:
    get:
      summary: Returns a list of active Event Recipients.
    post:
      summary: Adds a new Event Recipient.
      descripton: Only possible when an Event UpdateToken is provided within the Authorization request header. Returns an 201 response with created Recipient and Location header set to new Recipient API path.

  /events/{id}/recipients/{fk}:
    get:
      summary: Gets an Event Recipient.
    put:
      summary: Update an Event Recipient.
    delete:
      summary: Removes a Recipient from an Event.
      descripton: Only possible when an Event UpdateToken is provided within the Authorization request header. Deleting a Recipient does not remove it from storage but changes its status.

  /categoreis:
    get:
      summary: Gets a list of active Categories.
    post:
      summary: Creates a new Category.
      description: Only possible when an Admin login token is provided within the Authorization request header. Returns an 201 response with created Category and Location header set to new Category API path.

  /categories/{id}:
    get:
      summary: Returns a Category with requested ID.
    put:
      summary: Updates a Category with requested ID.
      description: Only possible when an Admin login token is provided within the Authorization request header.
    delete:
      summary: Deletes a Category with requested ID.
      description: Only possible when an Admin login token is provided within the Authorization request header. Deleting a Category does not remove it from storage but changes its status.

  /locations:
    get:
      summary: Returns a list of all active Locations.
      description: Active locations (status != deleted).
    post:
      summary: Creates a new Location.
      description: Only possible when an Admin login token is provided within the Authorization request header. Returns an 201 response with created object and Location header set to new object API path.

  /locations/{id}:
    get:
      summary: Returns a Location with requested ID.
    put:
      summary: Updates a Location with requested ID.
      description: Only possible when an Admin login token is provided within the Authorization request header.
    delete:
      summary: Deletes a Location with requested ID.
      description: Only possible when an Admin login token is provided within the Authorization request header. Deleting a Category does not remove it from storage but changes its status.

  /email-templates:
    get:
      summary: Returns a list of Email Templates.
      description: Only possible when an Admin login token is provided within the Authorization request header.

  /email-tempaltes/{id}:
    get:
      summary: Returns an Email Template.
      description: Only possible when an Admin login token is provided within the Authorization request header.
    put:
      summary: Updates an Email Template.
      description: Only possible when an Admin login token is provided within the Authorization request header.

  /admins:
    get:
      summary: Returns a list of Admins.
      description: Only possible when an Admin login token is provided within the Authorization request header.

  /admins/authorisation-tokens:
    post:
      summary: Creates an Admin authorisation token.
      description: Expects an object containing admin email and password. Returns an 201 response an object containing a new authorisation token.

  /admins/{id}:
    get:
      summary: Returns an Admin.
      description: Only possible when an Admin login token is provided within the Authorization request header.



  /OLD_domofon.yaml:
    get:
      produces:
        - text/plain; charset=utf-8
      summary: Retrieve Swagger API specification
      responses:
        200:
          description: YAML describing API
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/OLD_Error'
  /OLD_contacts:
    get:
      summary: Returns list of Contact entries
      description: Returned data is JSON array with entries of ContactResponse
      parameters:
        - name: category
          in: query
          description: Filter contacts by category
          type: string
          required: false
      responses:
        200:
          description: Return list of Contact entries
          schema:
            type: array
            items:
              $ref: '#/definitions/OLD_ContactResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/OLD_Error'

    post:
      summary: Allow creation of new Contact entry
      description: "We are aware it should be client-side generated PUT, but for simplicity of implementation we decided to keep POST. Returned String is ID of created event as UUID."
      responses:
        200:
          description: Contact was created
          examples:
            text/plain: "d41b57fb-30a4-44b8-99e2-9cb9f9058838"
            application/json:
              id: "d41b57fb-30a4-44b8-99e2-9cb9f9058838"
              secret: "123457fb-30a4-44b8-99e2-9cb9f9058838"
          schema:
            $ref: '#/definitions/OLD_EntityCreatedWithSecret'
        422:
          description: Required fields were missing or invalid
          examples:
            application/json:
              message: MissingFields
              fields: ['name', 'notifyEmail']
          schema:
            $ref: '#/definitions/OLD_Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/OLD_Error'
      parameters:
       - name: contact
         in: body
         description: Contact to add
         required: true
         schema:
          $ref: '#/definitions/OLD_ContactRequest'
  /OLD_contacts/sse:
    get:
      produces: ["text/event-stream"]
      summary: Streaming information about changes to Contacts list
      description: Streaming events representing changes to Contacts, after event was received it might be need to reload list of Contacts
      responses:
        200:
          description: Server-Sent Events stream
          schema:
            $ref: '#/definitions/OLD_Updated'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/OLD_Error'
  /OLD_contacts/{id}:
    get:
      summary: Retrieve details of Contact
      parameters:
        - name: id
          in: path
          type: string
          description: ID of the Contact to retrieve
          required: true
      responses:
        200:
          description: Contact was found and could be returned
          schema:
            $ref: '#/definitions/OLD_ContactResponse'
        404:
          description: Unable to find Contact entity
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/OLD_Error'
    delete:
      summary: Remove Contact entity
      parameters:
      - name: id
        in: path
        type: string
        description: ID of the Contact to remove
        required: true

      responses:
        200:
          description: Contact removed
          schema:
            type: string
          examples:
            text/plain: OK
            application/json:
              status: OK
        404:
          description: Unable to find Contact entity
          schema:
            type: string

        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/OLD_Error'
        401:
          description: Missing or wrong credentials
      security:
      - Bearer: []
  /OLD_contacts/{id}/notify:
    post:
      summary: Send notifications to defined email and phone
      parameters:
        - name: id
          in: path
          type: string
          description: ID of the Contact to trigger notification for
          required: true
      responses:
        200:
          description: Notification was sent
          schema:
            type: string
          examples:
            text/plain: OK
            application/json:
              status: OK
        429:
          description: Too many notification requests
          schema:
            $ref: '#/definitions/OLD_NotificationRetry'
        404:
          description: Unable to find Contact entity
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/OLD_Error'
  /OLD_contacts/{id}/important:
    put:
      summary: Change importance of the Contact
      parameters:
      - name: id
        in: path
        type: string
        description: ID of the Contact to change importance
        required: true
      - name: isimportant
        in: body
        description: Should Contact be marked as important
        schema:
          $ref: '#/definitions/OLD_IsImportant'
        required: true
      responses:
        200:
          description: Message importance status was changed
          schema:
            type: string
          examples:
            text/plain: OK
            application/json:
              status: OK
        404:
          description: Unable to find Contact entity
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/OLD_Error'
    get:
      summary: Get current value of importance
      parameters:
        - name: id
          in: path
          type: string
          description: ID of the Contact to retrieve
          required: true
      responses:
        200:
          description: Object describing importance of the Contact
          schema:
            $ref: '#/definitions/OLD_IsImportant'
        404:
          description: Unable to find Contact entity
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/OLD_Error'
        401:
          description: Missing or wrong credentials
      security:
      - Bearer: []
  /OLD_contacts/{id}/deputy:
    put:
      summary: Change deputy for Contact
      parameters:
        - name: id
          in: path
          type: string
          description: ID of the Contact to set custom Deputy
          required: true
        - name: deputy
          in: body
          schema:
            $ref: '#/definitions/OLD_Notifee'

      responses:
        200:
          description: Deputy was changed
          schema:
            type: string
          examples:
            text/plain: OK
            application/json:
              status: OK
        404:
          description: Unable to find Contact entity
          schema:
            type: string
        401:
          description: Missing or wrong credentials
      security:
      - Bearer: []

    delete:
      summary: Remove deputy
      parameters:
        - name: id
          in: path
          type: string
          description: ID of the Contact to remove custom Deputy
          required: true
      responses:
        200:
          description: Deputy was removed
          schema:
            type: string
          examples:
            text/plain: OK
            application/json:
              status: OK
        404:
          description: Unable to find Contact entity
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/OLD_Error'
        401:
          description: Missing or wrong credentials
      security:
      - Bearer: []
  /OLD_categories:
    get:
      summary: Returns list of Category entries
      description: Returned data is JSON array with entries of CategoryResponse
      responses:
        200:
          description: Return list of Category entries
          schema:
            type: array
            items:
              $ref: '#/definitions/OLD_CategoryResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/OLD_Error'

    post:
      summary: Allow creation of new Category
      description: "We are aware it should be client-side generated PUT, but for simplicity of implementation we decided to keep POST. Returned String is ID of created event as UUID."
      responses:
        200:
          description: Category was created
          examples:
            text/plain: "d41b57fb-30a4-44b8-99e2-9cb9f9058838"
            application/json:
              id: "d41b57fb-30a4-44b8-99e2-9cb9f9058838"
          schema:
            $ref: '#/definitions/OLD_EntityCreated'
        422:
          description: Required fields were missing or invalid
          examples:
            application/json:
              message: MissingFields
              fields: ['name', 'description', 'message']
          schema:
            $ref: '#/definitions/OLD_Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/OLD_Error'
        401:
          description: Missing or wrong credentials
      security:
      - Bearer: []
      parameters:
       - name: category
         in: body
         description: Category to add
         required: true
         schema:
          $ref: '#/definitions/OLD_CategoryRequest'
  /OLD_categories/{id}:
    get:
      summary: Retrieve details of Category
      parameters:
        - name: id
          in: path
          type: string
          description: ID of the Category to retrieve
          required: true
      responses:
        200:
          description: Cateogry was found and could be returned
          schema:
            $ref: '#/definitions/OLD_CategoryResponse'
        404:
          description: Unable to find Category entity
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/OLD_Error'
    delete:
      summary: Remove Category entity
      parameters:
      - name: id
        in: path
        type: string
        description: ID of the Category to remove
        required: true
      responses:
        200:
          description: Category removed
          schema:
            type: string
          examples:
            text/plain: OK
            application/json:
              status: OK
        404:
          description: Unable to find Category entity
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/OLD_Error'
        401:
          description: Missing or wrong credentials
      security:
      - Bearer: []
  /OLD_categories/{id}/notify:
    post:
      summary: Send notifications to Category, allowed only if isIndividual = false
      parameters:
        - name: id
          in: path
          type: string
          description: ID of the Contact to trigger notification for
          required: true
      responses:
        200:
          description: Notification was sent
          schema:
            type: string
          examples:
            text/plain: OK
            application/json:
              status: OK
        429:
          description: Too many notification requests
          schema:
            $ref: '#/definitions/OLD_NotificationRetry'
        400:
          description: Bad request, check if Category has isIndividual = false, otherwise it is not allowed
          schema:
            type: string
        404:
          description: Unable to find Contact entity
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/OLD_Error'
  /OLD_categories/{id}/messages:
    get:
      summary: Get available messages for Category
      parameters:
        - name: id
          in: path
          type: string
          description: ID of the Category
          required: true
      responses:
        200:
          description: List of available messages
          schema:
            type: array
            items:
              $ref: '#/definitions/OLD_CategoryMessage'
    post:
      summary: Add a message for Category
      parameters:
        - name: id
          in: path
          type: string
          description: ID of the Category
          required: true

        - name: message
          description: Content of the Message to be added
          in: body
          schema:
            type: string
      responses:
        200:
          description: Message was added
          schema:
            type: string
          examples:
            text/plain: OK
            application/json:
              status: OK
        422:
          description: Message was empty
        401:
          description: Missing or wrong admin token
      security:
      - Bearer: []
  /OLD_categories/{id}/messages/{messageId}:
    delete:
      summary: Remove a Message for given Category.
      description: If there is only one message for category, it cannot be removed.
      parameters:
        - name: id
          in: path
          type: string
          description: ID of the Category
          required: true
        - name: messageId
          in: path
          type: string
          description: ID of the Message to delete
          required: true
      responses:
        200:
          description: Message was removed
          schema:
            type: string
          examples:
            text/plain: OK
            application/json:
              status: OK
        401:
          description: Missing or wrong admin token
        404:
          description: Message with given ID was not found
        400:
          description: Tried to remove the only message for Category
      security:
       - Bearer: []
    put:
      summary: Update a Message for given Category
      parameters:
        - name: id
          in: path
          type: string
          description: ID of the Category
          required: true
        - name: messageId
          in: path
          type: string
          description: ID of the Message to delete
          required: true
        - name: message
          in: body
          schema:
            type: string
          description: New content of the Message
      responses:
        200:
          description: Message was updated
          schema:
            type: string
          examples:
            text/plain: OK
            application/json:
              status: OK
        401:
          description: Missing or wrong admin token
      security:
       - Bearer: []
  /OLD_login:
    get:
      summary: Get an admin token for use in Bearer schema.
      security:
        - Basic: []
      responses:
        200:
          description: Admin token was assigned
          schema:
            type: string
          examples:
            text/plain: 00000000-0000-0000-0000-420000000000
        401:
          description: Wrong or missing credentials
          schema:
            type: string

definitions:

  Event:
    type: object,
    properties:
      id:
        type: String
      editHash:
        type: string
      isImportant:
        type: boolean
        default: false
      fromDate:
        type: datetime
        default: now()
      toDate:
        type: datetime
        default: now() + 1 day
      emailTemplate:
        type: string
      smsTemplate:
        type: string
      noteTemplate:
        type: string
      useCounter:
        type: integer
        default: 0
      status:
        type: integer
        default: 0
      recipients:
        type: array
        items:
          $ref: '#/definitions/Recipient'
      categoryId:
        type: string
      locationIds:
        type: array
        items:
          type: integer
    required:
      - updateHash
      - fromDate
      - toDate
      - emailTemplate
      - smsTemplate
      - noteTemplate

  Recipient:
    type: object
    properties:
      id:
        type: string




  OLD_EntityCreated:
    type: object
    required:
      - id
    properties:
      id:
        type: string
  OLD_EntityCreatedWithSecret:
    type: object
    required:
      - id
      - secret
    properties:
      id:
        type: string
      secret:
        type: string
  OLD_IsImportant:
    type: object
    required:
      - isImportant
    properties:
      isImportant:
        type: boolean
  OLD_NotificationRetry:
    type: object
    required:
      - message
      - whenAllowed
    properties:
      message:
        type: string
      whenAllowed:
        type: string
        format: datetime
  OLD_Notifee:
    type: object
    required:
      - name
      - notifyEmail
      - phone
    properties:
      name:
        type: string
      company:
        type: string
      notifyEmail:
        type: string
      phone:
        type: string
  OLD_ContactRequest:
    type: object
    required:
      - name
      - category
      - notifyEmail
    properties:
      name:
        type: string
      category:
        type: string
        format: string
      company:
        type: string
      notifyEmail:
        type: string
      phone:
        type: string
      adminEmail:
        type: string
      fromDate:
        type: string
        format: date
      tillDate:
        type: string
        format: date
  OLD_ContactResponse:
    type: object
    required:
      - id
      - name
      - category
      - notifyEmail
      - adminEmail
      - isImportant
      - fromDate
    properties:
      id:
        type: string
      name:
        type: string
      category:
        type: string
      company:
        type: string
      notifyEmail:
        type: string
      phone:
        type: string
      adminEmail:
        type: string
      fromDate:
        type: string
        format: date
      tillDate:
        type: string
        format: date
      isImportant:
        type: boolean
      deputy:
        $ref: '#/definitions/OLD_Notifee'
      nextNotificationAllowedAt:
        type: string
        format: datetime
  OLD_Updated:
    type: object
    properties:
      updatedAt:
        type: string
        format: date-time
  OLD_CategoryRequest:
    type: object
    required:
     - name
     - description
     - message
    properties:
      name:
        type: string
      description:
        type: string
      isIndividual:
        type: boolean
        default: false
      message:
        type: string
        format: text
  OLD_CategoryResponse:
    type: object
    required:
      - id
      - name
      - description
      - isIndividual
      - messages
    properties:
      id:
        type: string
      name:
        type: string
      description:
        type: string
      isIndividual:
        type: boolean
      messages:
        type: array
        items:
          $ref: '#/definitions/OLD_CategoryMessage'
      nextNotificationAllowedAt:
        type: string
        format: datetime
  OLD_CategoryMessage:
    type: object
    required:
      - id
      - message
    properties:
      id:
        type: string
      message:
        type: string
  OLD_Error:
    type: object
    required:
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: array
        items:
          type: string


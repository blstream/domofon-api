swagger: '2.0'

host: localhost:8080 # uncomment to run tests against your local server

info:
  version: 0.2.0
  title: Domofon API
  description: Application started as part of CodeSpace and was further developped within Front-end Guild

basePath: /api

schemes:
  - http
  - https

consumes:
  - application/json

produces:
  - application/json

securityDefinitions:
  EventAccessToken:
    description: A token stored in an Event which allows for updating selected object.
    type: apiKey
    name: Authorization
    in: header
  AdminAuthorizationToken:
    type: apiKey
    name: Authorization
    in: header

paths:

  /events:

    get:
      summary: Returns a list of active Events.
      description: Returns only basic Event attributes. Sensitive data like recipient email are not returned. Active events are not deleted (status != deleted) and their date range is not in the past.
      produces:
        - application/json
      responses:
        200:
          schema:
            type: array,
            items:
              $ref: '#/definitions/SimpleEvent'
        500:
          description: Unexpeted error.
          schema:
            $ref: '#/definitions/ErrorResponse'

    post:
      summary: Creates a new Event.
      description: Created object can contain a list of location ids and a list of Recipients. Returns an 201 response with created Event and Location header set to new Event API path.
      produces:
      - application/json
      responses:
        201:
          schema:
            $ref: '#/definitions/Event'
        422:
          description: Required fields were missing or invalid.
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
          examples:
            application/json:
              massage: Invalid data.
              fields: ['name', 'recipients']
        500:
          description: Unexpeted error.
          schema:
            $ref: '#/definitions/ErrorResponse'

  /events/{id}:

    get:
      summary: Returns an Event with requested ID.
      description: Returned Event with all attributes contains embedded objects (recipients). Retrieving an entire Event is only possible when an EventAccessToken or an AdminAuthorizationToken is provided within the Authorization request header.
      parameters:
        - name: id
          in: path
          type: string
          description: Event ID
          required: true
      produces:
        - application/json
      responses:
        200:
          schema:
            $ref: '#/definitions/Event'
        401:
          description: Unauthorized. Authorization token missing or invalid.
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Event not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: Unexpeted error.
          schema:
            $ref: '#/definitions/ErrorResponse'

    put:
      summary: Updates Event with requested ID.
      description: Updating an Event is only possible when an EventAccessToken or an AdminAuthorizationToken is provided within the Authorization request header. Returns 200 response.
      parameters:
        - name: id
          in: path
          type: string
          description: Event ID
          required: true
      produces:
        - application/json
      responses:
        200:
          schema:
            $ref: '#/definitions/Event'
        401:
          description: Unauthorized. Authorization token missing or invalid.
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Event not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        422:
          description: Required fields were missing or invalid.
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        500:
          description: Unexpeted error.
          schema:
            $ref: '#/definitions/ErrorResponse'

    patch:
      summary: Updates Event with requested ID attributes.
      description: Updating an Event is only possible when an EventAccessToken or an AdminAuthorizationToken is provided within the Authorization request header. Returns 200 response.
      parameters:
        - name: id
          in: path
          type: string
          description: Event ID
          required: true
      produces:
        - application/json
      responses:
        200:
          schema:
            $ref: '#/definitions/Event'
        401:
          description: Unauthorized. Authorization token missing or invalid.
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Event not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        422:
          description: Required fields were missing or invalid.
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        500:
          description: Unexpeted error.
          schema:
            $ref: '#/definitions/ErrorResponse'

    delete:
      summary: Deletes Event with requested ID.
      description: Deleted events are not removed from storage. Their status is changed. Deleting an Event is only possible when an EventAccessToken or an AdminAuthorizationToken is provided within the Authorization request header.
      parameters:
        - name: id
          in: path
          type: string
          description: Event ID
          required: true
      produces:
        - application/json
      responses:
        200:
          schema:
            $ref: '#/definitions/SuccessResponse'
        401:
          description: Unauthorized. Authorization token missing or invalid.
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Event not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: Unexpeted error.
          schema:
            $ref: '#/definitions/ErrorResponse'

  /events/{id}/notifications:

    post:
      summary: Triggers sending Event noifications to all Recipients. Returns 200 response.
      description: No request body required.
      parameters:
        - name: id
          in: path
          type: string
          description: Event ID
          required: true
      produces:
        - application/json
      responses:
        201:
          schema:
            $ref: '#/definitions/SuccessResponse'
        404:
          description: Event not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: Unexpeted error.
          schema:
            $ref: '#/definitions/ErrorResponse'

  /events/{id}/locations:

    post:
      summary: Adds a new Location to Event.
      descripton: Only possible when an Event EventAccessToken or an AdminAuthorizationToken is provided within the Authorization request header. Request body requires an object containing added Location identifier in an ID property.
      parameters:
        - name: id
          in: path
          type: string
          description: Event ID
          required: true
      produces:
        - application/json
      responses:
        201:
          schema:
            $ref: '#/definitions/SuccessResponse'
        401:
          description: Unauthorized. Authorization token missing or invalid.
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Event not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        422:
          description: Location not found.
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        500:
          description: Unexpeted error.
          schema:
            $ref: '#/definitions/ErrorResponse'

  /events/{id}/locations/{fk}:

    delete:
      summary: Removes a Location from an Event.
      descripton: Only possible when an Event EventAccessToken or an AdminAuthorizationToken is provided within the Authorization request header. Request body requires an object containing deleted Location identifier in an ID property.
      parameters:
        - name: id
          in: path
          type: string
          description: Event ID
          required: true
        - name: fk
          in: path
          type: string
          description: Location ID
          required: true
      produces:
        - application/json
      responses:
        200:
          schema:
            $ref: '#/definitions/SuccessResponse'
        401:
          description: Unauthorized. Authorization token missing or invalid.
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Event or Location not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: Unexpeted error.
          schema:
            $ref: '#/definitions/ErrorResponse'

  /events/{id}/recipients:

    get:
      summary: Returns a list of active Event Recipients.
      parameters:
        - name: id
          in: path
          type: string
          description: Event ID
          required: true
      produces:
        - application/json
      responses:
        200:
          schema:
            type: array,
            items:
              $ref: '#/definitions/Recipient'
        401:
          description: Unauthorized. Authorization token missing or invalid.
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Event not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: Unexpeted error.
          schema:
            $ref: '#/definitions/ErrorResponse'

    post:
      summary: Adds a new Event Recipient.
      descripton: Only possible when an Event EventAccessToken or an AdminAuthorizationToken is provided within the Authorization request header. Returns an 201 response with created Recipient and Location header set to new Recipient API path.
      parameters:
        - name: id
          in: path
          type: string
          description: Event ID
          required: true
      produces:
        - application/json
      responses:
        201:
          schema:
            $ref: '#/definitions/Recipient'
        401:
          description: Unauthorized. Authorization token missing or invalid.
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Event not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        422:
          description: Invalid recipient data.
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        500:
          description: Unexpeted error.
          schema:
            $ref: '#/definitions/ErrorResponse'

  /events/{id}/recipients/{fk}:

    get:
      summary: Gets an Event Recipient.
      parameters:
        - name: id
          in: path
          type: string
          description: Event ID
          required: true
        - name: fk
          in: path
          type: string
          description: Recipient ID
          required: true
      produces:
        - application/json
      responses:
        200:
          schema:
            $ref: '#/definitions/Recipient'
        401:
          description: Unauthorized. Authorization token missing or invalid.
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Event or Recipient not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: Unexpeted error.
          schema:
            $ref: '#/definitions/ErrorResponse'

    put:
      summary: Update an Event Recipient.
      description: Only possible when an EventAccessToken or an AdminAuthorizationToken is provided within the Authorization request header.
      parameters:
        - name: id
          in: path
          type: string
          description: Event ID
          required: true
        - name: fk
          in: path
          type: string
          description: Recipient ID
          required: true
      produces:
        - application/json
      responses:
        200:
          schema:
            $ref: '#/definitions/Recipient'
        401:
          description: Unauthorized. Authorization token missing or invalid.
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Event not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        422:
          description: Required fields were missing or invalid.
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        500:
          description: Unexpeted error.
          schema:
            $ref: '#/definitions/ErrorResponse'

    patch:
      summary: Update an Event Recipient attributes.
      description: Only possible when an EventAccessToken or an AdminAuthorizationToken is provided within the Authorization request header.
      parameters:
        - name: id
          in: path
          type: string
          description: Event ID
          required: true
        - name: fk
          in: path
          type: string
          description: Recipient ID
          required: true
      produces:
        - application/json
      responses:
        200:
          schema:
            $ref: '#/definitions/Recipient'
        401:
          description: Unauthorized. Authorization token missing or invalid.
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Event not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        422:
          description: Required fields were missing or invalid.
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        500:
          description: Unexpeted error.
          schema:
            $ref: '#/definitions/ErrorResponse'

    delete:
      summary: Removes a Recipient from an Event.
      descripton: Only possible when an Event EventAccessToken or an AdminAuthorizationToken is provided within the Authorization request header. Deleting a Recipient does not remove it from storage but changes its status.
      parameters:
        - name: id
          in: path
          type: string
          description: Event ID
          required: true
        - name: fk
          in: path
          type: string
          description: Recipient ID
          required: true
      produces:
        - application/json
      responses:
        200:
          schema:
            $ref: '#/definitions/SuccessResponse'
        401:
          description: Unauthorized. Authorization token missing or invalid.
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Event or Recipient not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: Unexpeted error.
          schema:
            $ref: '#/definitions/ErrorResponse'

  /categoreis:

    get:
      summary: Gets a list of active Categories.
      produces:
        - application/json
      responses:
        200:
          schema:
            type: array,
            items:
              $ref: '#/definitions/Category'
        500:
          description: Unexpeted error.
          schema:
            $ref: '#/definitions/ErrorResponse'

    post:
      summary: Creates a new Category.
      description: Only possible when an AdminAuthorizationToken is provided within the Authorization request header. Returns an 201 response with created Category and Location header set to new Category API path.
      produces:
      - application/json
      responses:
        201:
          schema:
            $ref: '#/definitions/Category'
        401:
          description: Unauthorized. Authorization token missing or invalid.
          schema:
            $ref: '#/definitions/ErrorResponse'
        422:
          description: Required fields were missing or invalid.
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
          examples:
            application/json:
              massage: Invalid data.
              fields: ['name']
        500:
          description: Unexpeted error.
          schema:
            $ref: '#/definitions/ErrorResponse'

  /categories/{id}:

    get:
      summary: Returns a Category with requested ID.
      parameters:
        - name: id
          in: path
          type: string
          description: Category ID
          required: true
      produces:
        - application/json
      responses:
        200:
          schema:
            $ref: '#/definitions/Category'
        401:
          description: Unauthorized. Authorization token missing or invalid.
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Category not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: Unexpeted error.
          schema:
            $ref: '#/definitions/ErrorResponse'

    put:
      summary: Updates a Category with requested ID.
      description: Only possible when an AdminAuthorizationToken is provided within the Authorization request header.
      parameters:
        - name: id
          in: path
          type: string
          description: Category ID
          required: true
      produces:
        - application/json
      responses:
        200:
          schema:
            $ref: '#/definitions/Category'
        401:
          description: Unauthorized. Authorization token missing or invalid.
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Category not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        422:
          description: Required fields were missing or invalid.
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        500:
          description: Unexpeted error.
          schema:
            $ref: '#/definitions/ErrorResponse'

    patch:
      summary: Updates attributes of a Category with requested ID.
      description: Only possible when an AdminAuthorizationToken is provided within the Authorization request header.
      parameters:
        - name: id
          in: path
          type: string
          description: Event ID
          required: true
      produces:
        - application/json
      responses:
        200:
          schema:
            $ref: '#/definitions/Category'
        401:
          description: Unauthorized. Authorization token missing or invalid.
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Category not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        422:
          description: Required fields were missing or invalid.
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        500:
          description: Unexpeted error.
          schema:
            $ref: '#/definitions/ErrorResponse'

    delete:
      summary: Deletes a Category with requested ID.
      description: Only possible when an AdminAuthorizationToken is provided within the Authorization request header. Deleting a Category does not remove it from storage but changes its status.
      parameters:
        - name: id
          in: path
          type: string
          description: Category ID
          required: true
      produces:
        - application/json
      responses:
        200:
          schema:
            $ref: '#/definitions/SuccessResponse'
        401:
          description: Unauthorized. Authorization token missing or invalid.
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Category not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: Unexpeted error.
          schema:
            $ref: '#/definitions/ErrorResponse'

  /locations:

    get:
      summary: Returns a list of all active Locations.
      description: Active locations (status != deleted).
      produces:
        - application/json
      responses:
        200:
          schema:
            type: array,
            items:
              $ref: '#/definitions/Location'
        500:
          description: Unexpeted error.
          schema:
            $ref: '#/definitions/ErrorResponse'

    post:
      summary: Creates a new Location.
      description: Only possible when an AdminAuthorizationToken is provided within the Authorization request header. Returns an 201 response with created object and Location header set to new object API path.
      produces:
      - application/json
      responses:
        201:
          schema:
            $ref: '#/definitions/Location'
        401:
          description: Unauthorized. Authorization token missing or invalid.
          schema:
            $ref: '#/definitions/ErrorResponse'
        422:
          description: Required fields were missing or invalid.
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
          examples:
            application/json:
              massage: Invalid data.
              fields: ['name']
        500:
          description: Unexpeted error.
          schema:
            $ref: '#/definitions/ErrorResponse'

  /locations/{id}:

    get:
      summary: Returns a Location with requested ID.
      parameters:
        - name: id
          in: path
          type: string
          description: Location ID
          required: true
      produces:
        - application/json
      responses:
        200:
          schema:
            $ref: '#/definitions/Category'
        401:
          description: Unauthorized. Authorization token missing or invalid.
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Location not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: Unexpeted error.
          schema:
            $ref: '#/definitions/ErrorResponse'

    put:
      summary: Updates a Location with requested ID.
      description: Only possible when an AdminAuthorizationToken is provided within the Authorization request header.
      parameters:
        - name: id
          in: path
          type: string
          description: Location ID
          required: true
      produces:
        - application/json
      responses:
        200:
          schema:
            $ref: '#/definitions/Location'
        401:
          description: Unauthorized. Authorization token missing or invalid.
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Location not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        422:
          description: Required fields were missing or invalid.
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        500:
          description: Unexpeted error.
          schema:
            $ref: '#/definitions/ErrorResponse'

    patch:
      summary: Updates attributes of a Location with requested ID.
      description: Only possible when an AdminAuthorizationToken is provided within the Authorization request header.
      parameters:
        - name: id
          in: path
          type: string
          description: Event ID
          required: true
      produces:
        - application/json
      responses:
        200:
          schema:
            $ref: '#/definitions/Location'
        401:
          description: Unauthorized. Authorization token missing or invalid.
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Location not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        422:
          description: Required fields were missing or invalid.
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        500:
          description: Unexpeted error.
          schema:
            $ref: '#/definitions/ErrorResponse'

    delete:
      summary: Deletes a Location with requested ID.
      description: Only possible when an AdminAuthorizationToken is provided within the Authorization request header. Deleting a Location does not remove it from storage but changes its status.
      parameters:
        - name: id
          in: path
          type: string
          description: Location ID
          required: true
      produces:
        - application/json
      responses:
        200:
          schema:
            $ref: '#/definitions/SuccessResponse'
        401:
          description: Unauthorized. Authorization token missing or invalid.
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Location not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: Unexpeted error.
          schema:
            $ref: '#/definitions/ErrorResponse'

  /email-templates:

    get:
      summary: Returns a list of Email Templates.
      description: Only possible when an AdminAuthorizationToken is provided within the Authorization request header.
      produces:
        - application/json
      responses:
        200:
          schema:
            type: array,
            items:
              $ref: '#/definitions/EmailTemplete'
        401:
          description: Unauthorized. Authorization token missing or invalid.
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: Unexpeted error.
          schema:
            $ref: '#/definitions/ErrorResponse'

  /email-tempaltes/{id}:

    get:
      summary: Returns an Email Template.
      description: Only possible when an AdminAuthorizationToken is provided within the Authorization request header.
      parameters:
        - name: id
          in: path
          type: string
          description: Template ID
          required: true
      produces:
        - application/json
      responses:
        200:
          schema:
            $ref: '#/definitions/EmailTemplate'
        401:
          description: Unauthorized. Authorization token missing or invalid.
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Template not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: Unexpeted error.
          schema:
            $ref: '#/definitions/ErrorResponse'

    put:
      summary: Updates an Email Template.
      description: Only possible when an AdminAuthorizationToken is provided within the Authorization request header.
      parameters:
        - name: id
          in: path
          type: string
          description: Template ID
          required: true
      produces:
        - application/json
      responses:
        200:
          schema:
            $ref: '#/definitions/EmailTemplate'
        401:
          description: Unauthorized. Authorization token missing or invalid.
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Template not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        422:
          description: Required fields were missing or invalid.
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        500:
          description: Unexpeted error.
          schema:
            $ref: '#/definitions/ErrorResponse'

    patch:
      summary: Updates attributes of a Email Template with requested ID.
      description: Only possible when an AdminAuthorizationToken is provided within the Authorization request header.
      parameters:
        - name: id
          in: path
          type: string
          description: Template ID
          required: true
      produces:
        - application/json
      responses:
        200:
          schema:
            $ref: '#/definitions/EmailTemplate'
        401:
          description: Unauthorized. Authorization token missing or invalid.
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Template not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        422:
          description: Required fields were missing or invalid.
          schema:
            $ref: '#/definitions/ValidationErrorResponse'
        500:
          description: Unexpeted error.
          schema:
            $ref: '#/definitions/ErrorResponse'

  /admins:
    get:
      summary: Returns a list of Admins.
      description: Only possible when an AdminAuthorizationToken is provided within the Authorization request header.
      produces:
        - application/json
      responses:
        200:
          schema:
            type: array,
            items:
              $ref: '#/definitions/Admin'
        401:
          description: Unauthorized. Authorization token missing or invalid.
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: Unexpeted error.
          schema:
            $ref: '#/definitions/ErrorResponse'

  /admins/authorization-tokens:

    post:
      summary: Creates an Admin authorization token.
      description: Expects an object containing admin email and password. Returns an 201 response an object containing a new authorization token.
      produces:
        - application/json
      responses:
        201:
          schema:
            type: array,
            items:
              $ref: '#/definitions/AthorizationToken'
        401:
          description: Invalid login or password.
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: Unexpeted error.
          schema:
            $ref: '#/definitions/ErrorResponse'

  /admins/{id}:

    get:
      summary: Returns an Admin.
      description: Only possible when an AdminAuthorizationToken is provided within the Authorization request header.
      parameters:
        - name: id
          in: path
          type: string
          description: Admin ID
          required: true
      produces:
        - application/json
      responses:
        200:
          schema:
            $ref: '#/definitions/Admin'
        401:
          description: Unauthorized. Authorization token missing or invalid.
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Admin not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: Unexpeted error.
          schema:
            $ref: '#/definitions/ErrorResponse'

definitions:

  SimpleEvent:
    type: object
    properties:
      id:
        type: String
      name:
        type: string
      isImportant:
        type: boolean
        default: false
      noteTemplate:
        type: string
      categoryId:
        type: string

  Event:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      accessToken:
        type: string
      isImportant:
        type: boolean
        default: false
      fromDate:
        type: datetime
        default: now()
      toDate:
        type: datetime
        default: now() + 1 day
      emailTemplate:
        type: string
      smsTemplate:
        type: string
      noteTemplate:
        type: string
      useCounter:
        type: integer
        default: 0
      status:
        type: integer
        default: 0
      recipients:
        type: array
        items:
          $ref: '#/definitions/Recipient'
      categoryId:
        type: string
      locationIds:
        type: array
        items:
          type: integer
    required:
      - updateHash
      - fromDate
      - toDate
      - emailTemplate
      - smsTemplate
      - noteTemplate

  Recipient:
    type: objects
    properties:
      id:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      phone:
        type: string
      isAuthor:
        type: boolean
        default: false
      status:
        type: integer
        default: 0
    required:
      - firstName
      - email

  SuccessResponse:
    type: object,
    required:
      - status
      - message
    properties:
      status:
        type: string

  ErrorResponse:
    type: object
    required:
      - status
      - message
    properties:
      status:
        type: string
      code:
        type: integer
      message:
        type: string

  ValidationErrorResponse:
    type: object
    required:
      - status
      - message
    properties:
      status:
        type: string
      code:
        type: integer
      message:
        type: string
      fields:
        type: array
        items:
          type: string

  Category:
    type: object
    properties:
      id:
        type: String
      name:
        type: string
      emailTemplate:
        type: string
      smsTemplate:
        type: string
      noteTemplate:
        type: string
      status:
        type: integer
        default: 0
    required:
      - name
      - emailTemplate
      - smsTemplate
      - noteTemplate

  Location:
    type: object
    properties:
      id:
        type: String
      name:
        type: string
      address:
        type: string
      city:
        type: string
      status:
        type: integer
        default: 0
    required:
      - name
      - address
      - city

  EmailTemplete:
    type: object
    properties:
      id:
        type: String
      title:
        type: string
      body:
        type: string
    required:
      - title
      - body

  Admin:
    type: object
    properties:
      email:
        type: String
    required:
      - email

  AthorizationToken:
    type: object
    properties:
      token:
        type: String
    required:
      - token
